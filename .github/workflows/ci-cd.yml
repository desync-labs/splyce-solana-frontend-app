name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_REPOSITORY: ${{ vars.IMAGE_REPOSITORY }}
      ENV_TAG: ${{ github.ref == 'refs/heads/main' && '' || 'dev-' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Docker login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image (Production Stage)
        run: |
          docker build --target production -t ${{ env.IMAGE_REPOSITORY }}:${{ github.sha }} .
          docker tag ${{ env.IMAGE_REPOSITORY }}:${{ github.sha }} ${{ env.IMAGE_REPOSITORY }}:${{ env.ENV_TAG }}latest

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ env.IMAGE_REPOSITORY }}:${{ github.sha }}
          docker push ${{ env.IMAGE_REPOSITORY }}:${{ env.ENV_TAG }}latest

      - name: Set Argo CD secrets
        id: set-secrets
        shell: bash
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            {
              echo "ARGOCD_APP_NAME=${{ secrets.ARGOCD_APP_NAME_PROD }}"
              echo "ARGOCD_API_URL=${{ secrets.ARGOCD_API_URL_PROD }}"
              echo "ARGOCD_AUTH_TOKEN=${{ secrets.ARGOCD_AUTH_TOKEN_PROD }}"
            } >> "$GITHUB_OUTPUT"
          else
            {
              echo "ARGOCD_APP_NAME=${{ secrets.ARGOCD_APP_NAME_DEV }}"
              echo "ARGOCD_API_URL=${{ secrets.ARGOCD_API_URL_DEV }}"
              echo "ARGOCD_AUTH_TOKEN=${{ secrets.ARGOCD_AUTH_TOKEN_DEV }}"
            } >> "$GITHUB_OUTPUT"
          fi

      - name: Sync Argo CD and wait for completion
        run: |
          docker run --rm \
            -e ARGOCD_AUTH_TOKEN=${{ steps.set-secrets.outputs.ARGOCD_AUTH_TOKEN }} \
            argoproj/argocd:v2.6.15 \
            /bin/sh -c \
            "argocd app set ${{ steps.set-secrets.outputs.ARGOCD_APP_NAME }} \
            --server ${{ steps.set-secrets.outputs.ARGOCD_API_URL }} \
            --grpc-web \
            --parameter image.tag=${{ github.sha }} && \
            argocd app wait ${{ steps.set-secrets.outputs.ARGOCD_APP_NAME }} \
            --server ${{ steps.set-secrets.outputs.ARGOCD_API_URL }} \
            --grpc-web \
            --operation && \
            argocd app sync ${{ steps.set-secrets.outputs.ARGOCD_APP_NAME }} \
            --server ${{ steps.set-secrets.outputs.ARGOCD_API_URL }} \
            --grpc-web \
            --timeout 180"